buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url 'https://jitpack.io' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${project.forgegradle_version}", changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = mod_version
group = "igoodie.twitchspawn"
archivesBaseName = "twitchspawn_" + minecraft_version

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_17

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: "${project.minecraft_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    mods
    shade
    compile.extendsFrom shade
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Nightly Config by Electronwill
    shade(group: 'com.electronwill.night-config', name: 'core', version: '3.6.0') {
        transitive = false
    }
    shade(group: 'com.electronwill.night-config', name: 'toml', version: '3.6.0')

    // SocketIO Client
    shade(group: 'io.socket', name: 'socket.io-client', version: '1.0.0')
    minecraftLibrary group: 'io.socket', name: 'socket.io-client', version: '1.0.0'

    // RuntimeGoodies
    shade('com.github.iGoodie:RuntimeGoodies:1.1.0')
    minecraftLibrary 'com.github.iGoodie:RuntimeGoodies:1.1.0'

    // JDA
    shade("net.dv8tion:JDA:5.0.0-beta.9")
    minecraftLibrary "net.dv8tion:JDA:5.0.0-beta.9"

    // JUnit 5 for testings
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    finalizedBy 'reobfShadowJar'

    relocate("com.electronwill.nightconfig", "twitchspawn.com.electronwill.nightconfig")
    relocate("io.socket", "twitchspawn.io.socket")
    relocate("com.google.gson", "twitchspawn.com.google.gson")
    relocate("net.dv8tion.jda", "twitchspawn.net.dv8tion.jda")
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    archiveClassifier = 'slim'

//    // Include shaded source in the built mod jar
//    configurations.shade.each { dependency ->
//        from(project.zipTree(dependency)) {
//            exclude 'META-INF', 'META-INF/**'
//        }
//    }

    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_group,
                    "Specification-Version"   : "1.0",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${mod_version}",
                    "Implementation-Vendor"   : mod_group,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

test {
    useJUnitPlatform()
}
